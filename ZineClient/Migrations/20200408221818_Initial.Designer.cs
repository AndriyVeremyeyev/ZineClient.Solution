// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZineClient.Models;

namespace ZineClient.Migrations
{
    [DbContext(typeof(ZineClientContext))]
    [Migration("20200408221818_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ZineClient.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ZineClient.Models.ApplicationUserOrganization", b =>
                {
                    b.Property<int>("ApplicationUserOrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("ApplicationUserOrganizationId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ApplicationUserOrganization");
                });

            modelBuilder.Entity("ZineClient.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<byte[]>("MainImageFile");

                    b.Property<string>("MainImageUrl");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerId");

                    b.HasKey("OrganizationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            OrganizationId = 1,
                            Description = "We are a small grassroots community of creators committed to bringing you high quality content for the current era",
                            MainImageUrl = "https://www.geniuscr8.com/wp-content/uploads/2018/07/Genius-Concept-Sample-Logo-2.jpg",
                            Name = "The Sample Org"
                        },
                        new
                        {
                            OrganizationId = 2,
                            Description = "Pasting (and cutting, copying, etc.) is the name of the game for this paper-turned-digital media project",
                            MainImageUrl = "https://turbologo.com/articles/wp-content/uploads/2018/03/prozrachniy-logo-1-1280x720.png",
                            Name = "Makers of Ctrl+V"
                        },
                        new
                        {
                            OrganizationId = 3,
                            Description = "We pride ourselves on transparency and keeping the public informed. Check out our West Seattle Connection blog",
                            MainImageUrl = "https://cdn.vox-cdn.com/thumbor/2KfYhzovz49NNJ5aBw9agDxWoAo=/0x0:4000x3000/1200x800/filters:focal(1541x1365:2181x2005)/cdn.vox-cdn.com/uploads/chorus_image/image/65976577/shutterstock_1386088199.0.jpg",
                            Name = "West Seattle Connection"
                        });
                });

            modelBuilder.Entity("ZineClient.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Body");

                    b.Property<byte[]>("MainImageFile");

                    b.Property<string>("MainImageUrl");

                    b.Property<DateTime>("Published");

                    b.Property<string>("Source");

                    b.Property<string>("Title");

                    b.HasKey("PostId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ZineClient.Models.PostTag", b =>
                {
                    b.Property<int>("PostTagId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PostId");

                    b.Property<int>("TagId");

                    b.HasKey("PostTagId");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("ZineClient.Models.PostZine", b =>
                {
                    b.Property<int>("PostZineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PostId");

                    b.Property<int>("ZineId");

                    b.HasKey("PostZineId");

                    b.HasIndex("PostId");

                    b.HasIndex("ZineId");

                    b.ToTable("PostZine");
                });

            modelBuilder.Entity("ZineClient.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ZineClient.Models.Zine", b =>
                {
                    b.Property<int>("ZineId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("IssueNumber");

                    b.Property<byte[]>("MainImageFile");

                    b.Property<string>("MainImageUrl");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("PublicationDate");

                    b.HasKey("ZineId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Zines");

                    b.HasData(
                        new
                        {
                            ZineId = 1,
                            Description = "The zine of your dreams",
                            IssueNumber = 1,
                            MainImageUrl = "https://cms-assets.tutsplus.com/uploads/users/114/posts/32493/image/Mockup1.jpg",
                            Name = "Ctrl+V",
                            OrganizationId = 2,
                            PublicationDate = new DateTime(2020, 4, 8, 15, 18, 18, 7, DateTimeKind.Local).AddTicks(5502)
                        },
                        new
                        {
                            ZineId = 2,
                            Description = "The zine of your dreams, remastered",
                            IssueNumber = 2,
                            MainImageUrl = "https://texlibris.lib.utexas.edu/wp-content/uploads/2020/02/17-01898_3600-712x1024.jpg",
                            Name = "Ctrl+V",
                            OrganizationId = 2,
                            PublicationDate = new DateTime(2020, 4, 8, 15, 18, 18, 13, DateTimeKind.Local).AddTicks(7616)
                        },
                        new
                        {
                            ZineId = 3,
                            Description = "The zine of your dreams, trilogy edition",
                            IssueNumber = 4,
                            MainImageUrl = "https://images.squarespace-cdn.com/content/v1/5b69d5843917eed82e6834fc/1537917947123-QPP10RP1SC469FXQXP45/ke17ZwdGBToddI8pDm48kHTjdXaoHj2XBS1xQ9Jx_M57gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z5QPOohDIaIeljMHgDF5CVlOqpeNLcJ80NK65_fV7S1Uei60Zpw-ZuEzVY2XSpngzHUNhdVwAOL_XMz32vi4iSsh9ymnU-gXScjHEMuNgenFw/The+Joy+003-Cover-spreads.jpg?format=2500w",
                            Name = "Ctrl+V",
                            OrganizationId = 2,
                            PublicationDate = new DateTime(2020, 4, 8, 15, 18, 18, 13, DateTimeKind.Local).AddTicks(7659)
                        },
                        new
                        {
                            ZineId = 4,
                            Description = "The zine for when the zine of your dreams already existed",
                            IssueNumber = 1,
                            MainImageUrl = "https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/380a5783-bac6-4184-9776-270b1e3b6a1d/dchzmx3-4b7e18cb-02cb-41ce-a192-ccb57c77e763.png/v1/fill/w_1024,h_1453,q_80,strp/shindeku_zine_cover____by_neon_nuisance_dchzmx3-fullview.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7ImhlaWdodCI6Ijw9MTQ1MyIsInBhdGgiOiJcL2ZcLzM4MGE1NzgzLWJhYzYtNDE4NC05Nzc2LTI3MGIxZTNiNmExZFwvZGNoem14My00YjdlMThjYi0wMmNiLTQxY2UtYTE5Mi1jY2I1N2M3N2U3NjMucG5nIiwid2lkdGgiOiI8PTEwMjQifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6aW1hZ2Uub3BlcmF0aW9ucyJdfQ.UfjaWa0T3nF6rngtM2Fg0mW036EwLWIC4eZKmuEH_U4",
                            Name = "Ctrl+C",
                            OrganizationId = 2,
                            PublicationDate = new DateTime(2020, 4, 8, 15, 18, 18, 13, DateTimeKind.Local).AddTicks(7667)
                        },
                        new
                        {
                            ZineId = 5,
                            Description = "Asp.NET Core 101: A crash course",
                            IssueNumber = 1,
                            MainImageUrl = "https://dispozitivbooks.com/wp-content/uploads/2020/03/8.jpg",
                            Name = "Devs Digest",
                            OrganizationId = 1,
                            PublicationDate = new DateTime(2020, 4, 8, 15, 18, 18, 13, DateTimeKind.Local).AddTicks(7675)
                        },
                        new
                        {
                            ZineId = 6,
                            Description = "Our unfiltered opinions on group projects, late nights, and quarantine blues",
                            IssueNumber = 2,
                            MainImageUrl = "https://pbs.twimg.com/media/ETy7wcJWsAEplrI.jpg",
                            Name = "Team Week in the making",
                            OrganizationId = 1,
                            PublicationDate = new DateTime(2020, 4, 8, 15, 18, 18, 13, DateTimeKind.Local).AddTicks(7683)
                        },
                        new
                        {
                            ZineId = 7,
                            Description = "Though it's isolated from the rest of the city, West Seattle is an incredibly popular area, whether it's to live in or just to visit one of its hip neighborhoods.",
                            IssueNumber = 1,
                            MainImageUrl = "https://cdn.vox-cdn.com/thumbor/tyONoySTF3e4Qq64-86lCk9DdZA=/0x0:2500x1295/1200x900/filters:focal(751x398:1151x798)/cdn.vox-cdn.com/uploads/chorus_image/image/54721251/west_seattle_shutterstock.0.jpg",
                            Name = "About West Seattle",
                            OrganizationId = 3,
                            PublicationDate = new DateTime(2020, 4, 8, 15, 18, 18, 13, DateTimeKind.Local).AddTicks(7689)
                        },
                        new
                        {
                            ZineId = 8,
                            Description = "The renovated West Seattle Branch opened April 3, 2004. At this Carnegie library, tall ceilings contribute to a sense of openness. Rich detailing and use of wood throughout the interior add to the warm, historic feel.",
                            IssueNumber = 2,
                            MainImageUrl = "https://pauldorpat.com/wp-content/uploads/2011/12/branches-color-postcard-web1.jpg?w=500&h=309",
                            Name = "West Seattle Library",
                            OrganizationId = 3,
                            PublicationDate = new DateTime(2020, 4, 8, 15, 18, 18, 13, DateTimeKind.Local).AddTicks(7696)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ZineClient.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ZineClient.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZineClient.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ZineClient.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZineClient.Models.ApplicationUserOrganization", b =>
                {
                    b.HasOne("ZineClient.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Organizations")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ZineClient.Models.Organization", "Organization")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZineClient.Models.Organization", b =>
                {
                    b.HasOne("ZineClient.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("ZineClient.Models.Post", b =>
                {
                    b.HasOne("ZineClient.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("ZineClient.Models.PostTag", b =>
                {
                    b.HasOne("ZineClient.Models.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZineClient.Models.Tag", "Tag")
                        .WithMany("Posts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZineClient.Models.PostZine", b =>
                {
                    b.HasOne("ZineClient.Models.Post", "Post")
                        .WithMany("Zines")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZineClient.Models.Zine", "Zine")
                        .WithMany("Posts")
                        .HasForeignKey("ZineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZineClient.Models.Zine", b =>
                {
                    b.HasOne("ZineClient.Models.Organization", "Organization")
                        .WithMany("Zines")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
